/* *{
    padding: 0;
    margin: 0;
     Pré-definição do navegador sendo excluída
}  */
body{
    font-family: 'Montserrat', sans-serif;
}

header{
    background-color: rgb(161, 156, 156);
    padding: 20px 0;
}
/* inline -> tamanho do conteúdo, ex: uma imagem -> vai ter a altura e largura daquela imagem
block -> tamanho é sempre 100% da pagina */

.caixa{
    position: relative;
    /* fez com que a posição absoluta da tag nav entrasse na div */
    width: 940px;
    margin: 0 auto;
    /* largura padrão da web */
}

nav{
    position: absolute;
    /* position absuloute -> Posição absoluta em relação a página inteira, ao cabeçalho, posição começa em outro lugar,
    nesse exemplo ele sai do header. Posso posicionar meu elemento em qualquer lugar da página com ele. */
    /* position relative -> posição relativa a posição inicial */
    top: 110px;
    right: 0;
}
nav ul li {
    display: inline-flex;
    margin: 0 0 0 10px;
}

nav a{
    text-transform: uppercase;
    text-decoration: none;
    color: black;
    font-weight: bold;
    font-size: 22px;
}

nav a:hover{
    /* quando mouse passar o cima */
    text-decoration: underline;
    color: rgb(172, 125, 40);
}

.produtos{
    width: 940px;
    margin: 0 auto;
    padding: 50px 0;
}
.produtos li{
    display: inline-block;
    text-align: center;
    border: 2px solid black;
    /* tamanho -> tipo -> cor */
    /* tipos -> solid, dashed, dotted -> solido, tracejado, pontilhado */
    border-radius: 10px;
    width: 30%;
    vertical-align: top;
    margin: 0 1.5%;
    padding: 30px 20px;
    box-sizing: border-box;
    /* box-sizing delimita o tamanho dito anteriormente para que não seja incrementado o tamanho dos objtos com margem e
    e padding (espaçamento interno), com isso box-sizing faz com que a largura seja sempre 30% delimitado no width
    e o padding se encaixe nesses 30% */
}

.produtos li:hover{
    border-color: rgb(172, 125, 40);
}

.produtos li:active{
    /* quando estiver clicando */
    border-color: rgb(31, 90, 31);
}

.produtos li:hover h2{
    /* quando o mouse estiver por cima, alterar a tag que está sendo mencionada */
    font-size: 34px;
}
.produtos h2{
    font-size: 30px;
    font-weight: bold;
}

.produto-descricao{
    font-size: 18px;
}
.produtos-preço{
    font-size: 22px;
    font-weight: bold;
    margin-top: 10px;
}

footer{
    text-align: center;
    background: url('assets/bg.jpg');
    padding: 40px 0;
}

.copyright{
    color: white;
    font-size: 12px;
    margin-top: 20px;
}

main{
    background: linear-gradient(#eeedede3,#9e9e9e,#747070);
    /* no primeiro valor, eu posso colocar o valor em graus para dizer se vem de baixo para cima ou de um lado para o outro */
    /* radial-gratient -> em circulos */
}

form{
    margin: 40px 0;
}

form label, form legend{
    display: block;
    /* possui display inline, ou seja, todos os label ficam um do lado do outro */
    font-size: 20px;
    margin-bottom: 10px;
}
.input-padrao{
    display: block;
    /* input possui display inline-block */
    margin-bottom: 20px;
    padding: 10px 25px;
    /* espaçamento interno, dentro das caixinhas */
    width: 50%;
}

.checkbox{
    margin: 20px 0;
}

.enviar{
    width: 40%;
    padding: 15px 0;
    background-color: rgb(255, 166, 0);
    color: white;
    font-weight: bold;
    font-size: 18px;
    transition: 1s all;
    /* transição fazendo com que as coisas não mudem automaticamente. Por exemplo, nesse caso eu pedi quando o mouse estiver em cima do botão, mudar a cor para laranja escuro, se não tivesse o "transition-delay", iria acontecer imediatamente, com essa ferramenta pedimos um pouco de atraso para que aconteça o que pedimos */
    border: none;
    border-radius:5px;
}

.enviar:hover{
    background-color: darkorange;
    transform: scale(1.1);
    /* aumentar a escala do que foi pedido*/
    cursor: pointer;
}

table{
    margin: 20px 0 40px;
}

thead{
    background-color: grey;
    color: white;
    font-weight: bold;
}
td, th{
    border: 1px solid black;
    padding: 8px 15px;
}
/* inicio pagina principal */
.banner{
    width: 100%;
}

.titulo-principal{
    text-align: center;
    font-size: 2em;
    /* em -> tamanho base, proporcional */
    /* 2em -> 2* tamanho base */
    /* ex, tamanho base = 16px, 2em = 32px */
    font-weight: bold;
    margin: 1em 0;
    clear: left;
    /* limpar o float */

    /* text-shadow: 2px 2px red;
    sombra do texto, desenhada com o texto */

    /*color: rgba(0,0,0,0.3);
     rgba -> inclui a camada de opacidade (alpha) */
}

.principal{
    padding: 3em 0;
    width: 940px;
    margin: 0 auto;
}

.principal p{
    margin: 0 0 1em;
}

.principal strong{
    font-weight: bold;
}

.principal em{
    font-style: italic;
}

.utensilios{
    width: 120px;
    float: left;
    margin: 0 20px 0;
    /* margin-left: 20px;
    margin-right: 20px; */
}

.mapa{
    padding: 3em 0;
}

.mapa p{
    margin: 0 0 2em;
    text-align: center;
}

.mapa-conteudo{
    width: 940px;
    margin: 0 auto;
}

.beneficios{
    padding: 3em 0;
    /* box-shadow: inset 0 0 #FF0000;
    inset -> fazendo com que a sombra seja interna
    sombras internas não são deslocáveis x e y permanecem 0
    */
}

.imagem-beneficio{
    width: 60%;
    opacity: 1;
    transition: 400ms;
    box-shadow: 10px  10px 10px black ;
    
    /*sombra do objeto (na caixa) 
    box-shawdow: X Y #XXXXXX; sendo x deslocamento no eixo x e y deslocamento no eixo y (plano cartesiano)
    terceiro elemento -> blur -> grau de espalhamento da sombra, ela vai deixar de ser sólida e vai para do sólido até um grau de espalhamento
    box-shadow: 10px  10px black ; -> nesse caso a sombra é um quadrado
    Quarto elemento -> intensidade da borda 
    eu posso pôr mais sombras, utilizando a virgula, por ex,  box-shadow: 10px  10px 30px black, -10px -10px 5px yrllow;*/
}
.imagem-beneficio:hover{
    opacity: 0.3;
}

.conteudo-beneficios {
    width: 640px;
    margin: 0 auto;
}

.lista-benefits {
    width: 40%;
    display: inline-block;
    vertical-align: top;
}

.itens{
    line-height: 1.5em;
    /* altura da linha para a lista */
}
.itens:before{
    content: "★";
}

/* .itens:first-child:{}
.itens:nth-child(2n){} */

.itens:nth-child(1){
    /* pseudo elemento dizendo que o primeiro item da classe 'first' faça algo e nth quer dizer qualquer numero desde que coloque entre parenteses, além de poder fazer cálculos dentro desse parênteses, por exemplo, se por '2n', pegará todos os itens da lista pares */
    font-weight: bold;
}

.video {
    width: 560px;
    margin: 2em auto;
    /* automatico na esquerda e direita para centralizar o conteúdo */
}

/* media queries

Perguntaremos ao navegador qual é o tamanho da tela em questão e, se for aquele que desejamos, entregaremos o estilo correto.

Para realizar isso, utilizaremos o @media, com o valor do tipo de tela screen e a pesquisa. Todas as telas que tenham até 450, terão esse estilo diferente, reescrito. Para exempliciar, colocaremos no background um estilo da cor vermelha. 
@media screen and (max-width: 480px) {
    body {
        background: red;
    }
}
*/

@media screen and (max-width: 480px) {
    .caixa, .principal, .conteudo-beneficios, .mapa-conteudo, .video{
        width: auto;
    }

    h1{
        text-align: center;
    }

    nav{
        position: static;
        /* menu que tá na posição absolute, volte a ser estático */
    }

    .lista-benefits, .imagem-beneficio{
        width: 100%;
    }

    /* adaptação da visualização do pc para o celular -> responsividade */
}

/* main > p{
    Seletor >, para acessar os filhos de determinado elemento. Por exemplo, para acessar todos os p dentro de main:
}

img + p{
    Seletor +, para acessar o primeiro irmão de determinado elemento. Por exemplo, para acessar o primeiro p após um img:
}

img ~ p {
    Seletor ~, para acessar todos os irmãos de determinado elemento. Por exemplo, para acessar todos os p após um img:
} 

.principal p:not(#missao) {
    Seletor not, para acessar os elementos, exceto algum. Por exemplo, para acessar todos os p dentro de main, exceto o p que tem id missao:
}

*/

/* tag -> 1
Classe -> 10
id -> 100
Forças de cada elemento do css, é importante saber para que nada seja sobrescrito
*/